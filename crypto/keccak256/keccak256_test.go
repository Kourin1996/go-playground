package main

import (
	"fmt"
	"testing"
)

func TestRot(t *testing.T) {
	tests := []struct {
		x uint64
		n int8
		s uint8
		e uint64
	}{
		{
			0xc000000000000000, // 1100....
			2,
			4,
			0x3000000000000000, // 0011....
		},
		{
			0xe000000000000000, // 1110....
			1,
			4,
			0xd000000000000000, // 1101....
		},
		{
			0xa000000000000000, // 1010....
			1,
			4,
			0x5000000000000000, // 0101....
		},
		{
			0xa000000000000000, // 1010....
			8,
			4,
			0xa000000000000000, // 1010....
		},
		{
			0xc000000000000000, // 1100....
			-2,
			4,
			0x3000000000000000, // 0011....
		},
		{
			0xe000000000000000, // 1110....
			-2,
			4,
			0xb000000000000000, // 1011....
		},
		{
			0xa000000000000000, // 1010....
			-1,
			4,
			0x5000000000000000, // 0101....
		},
		{
			0xa000000000000000, // 1010....
			-8,
			4,
			0xa000000000000000, // 1010....
		},
	}

	for _, tt := range tests {
		name := fmt.Sprintf("rot(%x, %d, %d) must returns %x", tt.x, tt.n, tt.s, tt.e)
		t.Run(name, func(t *testing.T) {
			r := rot(tt.x, tt.n, tt.s)
			if r != tt.e {
				t.Errorf("%s name expect %b, but got %b", name, tt.e, r)
			}
		})
	}
}
